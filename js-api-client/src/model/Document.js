/**
 * Harpocrates API
 * This is the Rest API specification for the Harpocrates application
 *
 * The version of the OpenAPI document: 8.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Paragraph from './Paragraph';
import PredictedClassification from './PredictedClassification';

/**
 * The Document model module.
 * @module model/Document
 * @version 8.2.0
 */
class Document {
  /**
   * Constructs a new <code>Document</code>.
   * A document to review
   * @alias module:model/Document
   * @param documentId {String}
   * @param paragraphs {Array.<module:model/Paragraph>} list of paragraph object representing the content of the document
   */
  constructor(documentId, paragraphs) {
    Document.initialize(this, documentId, paragraphs);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, documentId, paragraphs) {
    obj["documentId"] = documentId;
    obj["paragraphs"] = paragraphs;
  }

  /**
   * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Document} obj Optional instance to populate.
   * @return {module:model/Document} The populated <code>Document</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Document();

      if (data.hasOwnProperty("name")) {
        obj["name"] = ApiClient.convertToType(data["name"], "String");
      }
      if (data.hasOwnProperty("documentId")) {
        obj["documentId"] = ApiClient.convertToType(
          data["documentId"],
          "String"
        );
      }
      if (data.hasOwnProperty("paragraphs")) {
        obj["paragraphs"] = ApiClient.convertToType(data["paragraphs"], [
          Paragraph
        ]);
      }
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('documentId')) {
                obj['documentId'] = ApiClient.convertToType(data['documentId'], 'String');
            }
            if (data.hasOwnProperty('predictedClassification')) {
                obj['predictedClassification'] = PredictedClassification.constructFromObject(data['predictedClassification']);
            }
            if (data.hasOwnProperty('paragraphs')) {
                obj['paragraphs'] = ApiClient.convertToType(data['paragraphs'], [Paragraph]);
            }
        }
        return obj;
    }


}

/**
 * @member {String} name
 */
Document.prototype["name"] = undefined;

/**
 * @member {String} documentId
 */
Document.prototype["documentId"] = undefined;

/**
 * @member {module:model/PredictedClassification} predictedClassification
 */
Document.prototype['predictedClassification'] = undefined;

/**
 * list of paragraph object representing the content of the document
 * @member {Array.<module:model/Paragraph>} paragraphs
 */
Document.prototype["paragraphs"] = undefined;

export default Document;
