# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from harpocrates_server.models.base_model_ import Model
from harpocrates_server.models.predicted_classification import PredictedClassification
from harpocrates_server.models.text_content import TextContent
from harpocrates_server import util

from harpocrates_server.models.predicted_classification import PredictedClassification  # noqa: E501
from harpocrates_server.models.text_content import TextContent  # noqa: E501

class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, document_id=None, predicted_classification=None, text_contents=None):  # noqa: E501
        """Document - a model defined in OpenAPI

        :param name: The name of this Document.  # noqa: E501
        :type name: str
        :param document_id: The document_id of this Document.  # noqa: E501
        :type document_id: str
        :param predicted_classification: The predicted_classification of this Document.  # noqa: E501
        :type predicted_classification: PredictedClassification
        :param text_contents: The text_contents of this Document.  # noqa: E501
        :type text_contents: List[TextContent]
        """
        self.openapi_types = {
            'name': str,
            'document_id': str,
            'predicted_classification': PredictedClassification,
            'text_contents': List[TextContent]
        }

        self.attribute_map = {
            'name': 'name',
            'document_id': 'documentId',
            'predicted_classification': 'predictedClassification',
            'text_contents': 'textContents'
        }

        self._name = name
        self._document_id = document_id
        self._predicted_classification = predicted_classification
        self._text_contents = text_contents

    @classmethod
    def from_dict(cls, dikt) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The document of this Document.  # noqa: E501
        :rtype: Document
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Document.


        :return: The name of this Document.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Document.


        :param name: The name of this Document.
        :type name: str
        """

        self._name = name

    @property
    def document_id(self):
        """Gets the document_id of this Document.


        :return: The document_id of this Document.
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Document.


        :param document_id: The document_id of this Document.
        :type document_id: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def predicted_classification(self):
        """Gets the predicted_classification of this Document.


        :return: The predicted_classification of this Document.
        :rtype: PredictedClassification
        """
        return self._predicted_classification

    @predicted_classification.setter
    def predicted_classification(self, predicted_classification):
        """Sets the predicted_classification of this Document.


        :param predicted_classification: The predicted_classification of this Document.
        :type predicted_classification: PredictedClassification
        """

        self._predicted_classification = predicted_classification

    @property
    def text_contents(self):
        """Gets the text_contents of this Document.

        list of textContent object representing the content of the document  # noqa: E501

        :return: The text_contents of this Document.
        :rtype: List[TextContent]
        """
        return self._text_contents

    @text_contents.setter
    def text_contents(self, text_contents):
        """Sets the text_contents of this Document.

        list of textContent object representing the content of the document  # noqa: E501

        :param text_contents: The text_contents of this Document.
        :type text_contents: List[TextContent]
        """
        if text_contents is None:
            raise ValueError("Invalid value for `text_contents`, must not be `None`")  # noqa: E501

        self._text_contents = text_contents
