# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from harpocrates_server.models.base_model_ import Model
from harpocrates_server.models.predicted_classification_explanation import PredictedClassificationExplanation
from harpocrates_server import util

from harpocrates_server.models.predicted_classification_explanation import PredictedClassificationExplanation  # noqa: E501

class PredictedClassification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sensitive=None, sensitivity=None, classifier=None, explanations=None):  # noqa: E501
        """PredictedClassification - a model defined in OpenAPI

        :param sensitive: The sensitive of this PredictedClassification.  # noqa: E501
        :type sensitive: bool
        :param sensitivity: The sensitivity of this PredictedClassification.  # noqa: E501
        :type sensitivity: float
        :param classifier: The classifier of this PredictedClassification.  # noqa: E501
        :type classifier: str
        :param explanations: The explanations of this PredictedClassification.  # noqa: E501
        :type explanations: List[PredictedClassificationExplanation]
        """
        self.openapi_types = {
            'sensitive': bool,
            'sensitivity': float,
            'classifier': str,
            'explanations': List[PredictedClassificationExplanation]
        }

        self.attribute_map = {
            'sensitive': 'sensitive',
            'sensitivity': 'sensitivity',
            'classifier': 'classifier',
            'explanations': 'explanations'
        }

        self._sensitive = sensitive
        self._sensitivity = sensitivity
        self._classifier = classifier
        self._explanations = explanations

    @classmethod
    def from_dict(cls, dikt) -> 'PredictedClassification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The predictedClassification of this PredictedClassification.  # noqa: E501
        :rtype: PredictedClassification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensitive(self):
        """Gets the sensitive of this PredictedClassification.

        true if the document is predicted to be sensitive, false otherwise  # noqa: E501

        :return: The sensitive of this PredictedClassification.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this PredictedClassification.

        true if the document is predicted to be sensitive, false otherwise  # noqa: E501

        :param sensitive: The sensitive of this PredictedClassification.
        :type sensitive: bool
        """
        if sensitive is None:
            raise ValueError("Invalid value for `sensitive`, must not be `None`")  # noqa: E501

        self._sensitive = sensitive

    @property
    def sensitivity(self):
        """Gets the sensitivity of this PredictedClassification.

        Document sensitivity  # noqa: E501

        :return: The sensitivity of this PredictedClassification.
        :rtype: float
        """
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity):
        """Sets the sensitivity of this PredictedClassification.

        Document sensitivity  # noqa: E501

        :param sensitivity: The sensitivity of this PredictedClassification.
        :type sensitivity: float
        """
        if sensitivity is not None and sensitivity > 100.0:  # noqa: E501
            raise ValueError("Invalid value for `sensitivity`, must be a value less than or equal to `100.0`")  # noqa: E501
        if sensitivity is not None and sensitivity < 0.0:  # noqa: E501
            raise ValueError("Invalid value for `sensitivity`, must be a value greater than or equal to `0.0`")  # noqa: E501

        self._sensitivity = sensitivity

    @property
    def classifier(self):
        """Gets the classifier of this PredictedClassification.

        Classifier algorithm used for this classification  # noqa: E501

        :return: The classifier of this PredictedClassification.
        :rtype: str
        """
        return self._classifier

    @classifier.setter
    def classifier(self, classifier):
        """Sets the classifier of this PredictedClassification.

        Classifier algorithm used for this classification  # noqa: E501

        :param classifier: The classifier of this PredictedClassification.
        :type classifier: str
        """

        self._classifier = classifier

    @property
    def explanations(self):
        """Gets the explanations of this PredictedClassification.

        list of explanations for a predicted classification  # noqa: E501

        :return: The explanations of this PredictedClassification.
        :rtype: List[PredictedClassificationExplanation]
        """
        return self._explanations

    @explanations.setter
    def explanations(self, explanations):
        """Sets the explanations of this PredictedClassification.

        list of explanations for a predicted classification  # noqa: E501

        :param explanations: The explanations of this PredictedClassification.
        :type explanations: List[PredictedClassificationExplanation]
        """

        self._explanations = explanations
