# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from harpocrates_server.models.base_model import Model
from harpocrates_server.models.feature import Feature
from harpocrates_server import util

from harpocrates_server.models.feature import Feature  # noqa: E501

class PredictedClassificationExplanation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, features=None, explainer=None):  # noqa: E501
        """PredictedClassificationExplanation - a model defined in OpenAPI

        :param features: The features of this PredictedClassificationExplanation.  # noqa: E501
        :type features: List[Feature]
        :param explainer: The explainer of this PredictedClassificationExplanation.  # noqa: E501
        :type explainer: str
        """
        self.openapi_types = {
            'features': List[Feature],
            'explainer': str
        }

        self.attribute_map = {
            'features': 'features',
            'explainer': 'explainer'
        }

        self._features = features
        self._explainer = explainer

    @classmethod
    def from_dict(cls, dikt) -> 'PredictedClassificationExplanation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The predictedClassificationExplanation of this PredictedClassificationExplanation.  # noqa: E501
        :rtype: PredictedClassificationExplanation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def features(self):
        """Gets the features of this PredictedClassificationExplanation.

        List of features with weights explaining a text's classification  # noqa: E501

        :return: The features of this PredictedClassificationExplanation.
        :rtype: List[Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this PredictedClassificationExplanation.

        List of features with weights explaining a text's classification  # noqa: E501

        :param features: The features of this PredictedClassificationExplanation.
        :type features: List[Feature]
        """
        if features is None:
            raise ValueError("Invalid value for `features`, must not be `None`")  # noqa: E501

        self._features = features

    @property
    def explainer(self):
        """Gets the explainer of this PredictedClassificationExplanation.

        Explainer used to obtain explanation  # noqa: E501

        :return: The explainer of this PredictedClassificationExplanation.
        :rtype: str
        """
        return self._explainer

    @explainer.setter
    def explainer(self, explainer):
        """Sets the explainer of this PredictedClassificationExplanation.

        Explainer used to obtain explanation  # noqa: E501

        :param explainer: The explainer of this PredictedClassificationExplanation.
        :type explainer: str
        """
        if explainer is None:
            raise ValueError("Invalid value for `explainer`, must not be `None`")  # noqa: E501

        self._explainer = explainer
