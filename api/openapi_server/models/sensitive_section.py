# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.section import Section
from openapi_server.models.sensitive_section_all_of import SensitiveSectionAllOf
from openapi_server import util

from openapi_server.models.section import Section  # noqa: E501
from openapi_server.models.sensitive_section_all_of import SensitiveSectionAllOf  # noqa: E501

class SensitiveSection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, start_offset=None, end_offset=None, full_annotation=None, name=None, description=None):  # noqa: E501
        """SensitiveSection - a model defined in OpenAPI

        :param start_offset: The start_offset of this SensitiveSection.  # noqa: E501
        :type start_offset: int
        :param end_offset: The end_offset of this SensitiveSection.  # noqa: E501
        :type end_offset: int
        :param full_annotation: The full_annotation of this SensitiveSection.  # noqa: E501
        :type full_annotation: str
        :param name: The name of this SensitiveSection.  # noqa: E501
        :type name: str
        :param description: The description of this SensitiveSection.  # noqa: E501
        :type description: str
        """
        self.openapi_types = {
            'start_offset': int,
            'end_offset': int,
            'full_annotation': str,
            'name': str,
            'description': str
        }

        self.attribute_map = {
            'start_offset': 'startOffset',
            'end_offset': 'endOffset',
            'full_annotation': 'fullAnnotation',
            'name': 'name',
            'description': 'description'
        }

        self._start_offset = start_offset
        self._end_offset = end_offset
        self._full_annotation = full_annotation
        self._name = name
        self._description = description

    @classmethod
    def from_dict(cls, dikt) -> 'SensitiveSection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sensitiveSection of this SensitiveSection.  # noqa: E501
        :rtype: SensitiveSection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def start_offset(self):
        """Gets the start_offset of this SensitiveSection.

        start offset of a section in characters from the beginning of the document  # noqa: E501

        :return: The start_offset of this SensitiveSection.
        :rtype: int
        """
        return self._start_offset

    @start_offset.setter
    def start_offset(self, start_offset):
        """Sets the start_offset of this SensitiveSection.

        start offset of a section in characters from the beginning of the document  # noqa: E501

        :param start_offset: The start_offset of this SensitiveSection.
        :type start_offset: int
        """
        if start_offset is None:
            raise ValueError("Invalid value for `start_offset`, must not be `None`")  # noqa: E501

        self._start_offset = start_offset

    @property
    def end_offset(self):
        """Gets the end_offset of this SensitiveSection.

        end offset of a section in characters from the beginning of the document  # noqa: E501

        :return: The end_offset of this SensitiveSection.
        :rtype: int
        """
        return self._end_offset

    @end_offset.setter
    def end_offset(self, end_offset):
        """Sets the end_offset of this SensitiveSection.

        end offset of a section in characters from the beginning of the document  # noqa: E501

        :param end_offset: The end_offset of this SensitiveSection.
        :type end_offset: int
        """
        if end_offset is None:
            raise ValueError("Invalid value for `end_offset`, must not be `None`")  # noqa: E501

        self._end_offset = end_offset

    @property
    def full_annotation(self):
        """Gets the full_annotation of this SensitiveSection.

        For debugging purposes, the full text of the annotation  # noqa: E501

        :return: The full_annotation of this SensitiveSection.
        :rtype: str
        """
        return self._full_annotation

    @full_annotation.setter
    def full_annotation(self, full_annotation):
        """Sets the full_annotation of this SensitiveSection.

        For debugging purposes, the full text of the annotation  # noqa: E501

        :param full_annotation: The full_annotation of this SensitiveSection.
        :type full_annotation: str
        """

        self._full_annotation = full_annotation

    @property
    def name(self):
        """Gets the name of this SensitiveSection.

        what was the exemption that was found (mandatory)  # noqa: E501

        :return: The name of this SensitiveSection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SensitiveSection.

        what was the exemption that was found (mandatory)  # noqa: E501

        :param name: The name of this SensitiveSection.
        :type name: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this SensitiveSection.

        This is an optional textual description of what the predicted sensitivity is, suitable for presentation to the user  # noqa: E501

        :return: The description of this SensitiveSection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SensitiveSection.

        This is an optional textual description of what the predicted sensitivity is, suitable for presentation to the user  # noqa: E501

        :param description: The description of this SensitiveSection.
        :type description: str
        """

        self._description = description
