# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.feature import Feature
from openapi_server.models.predicted_classification import PredictedClassification
from openapi_server.models.predicted_classification_with_explanation_all_of import PredictedClassificationWithExplanationAllOf
from openapi_server import util

from openapi_server.models.feature import Feature  # noqa: E501
from openapi_server.models.predicted_classification import PredictedClassification  # noqa: E501
from openapi_server.models.predicted_classification_with_explanation_all_of import PredictedClassificationWithExplanationAllOf  # noqa: E501

class PredictedClassificationWithExplanation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sensitive=None, sensitivity=None, sensitive_features=None, non_sensitive_features=None):  # noqa: E501
        """PredictedClassificationWithExplanation - a model defined in OpenAPI

        :param sensitive: The sensitive of this PredictedClassificationWithExplanation.  # noqa: E501
        :type sensitive: bool
        :param sensitivity: The sensitivity of this PredictedClassificationWithExplanation.  # noqa: E501
        :type sensitivity: int
        :param sensitive_features: The sensitive_features of this PredictedClassificationWithExplanation.  # noqa: E501
        :type sensitive_features: List[Feature]
        :param non_sensitive_features: The non_sensitive_features of this PredictedClassificationWithExplanation.  # noqa: E501
        :type non_sensitive_features: List[Feature]
        """
        self.openapi_types = {
            'sensitive': bool,
            'sensitivity': int,
            'sensitive_features': List[Feature],
            'non_sensitive_features': List[Feature]
        }

        self.attribute_map = {
            'sensitive': 'sensitive',
            'sensitivity': 'sensitivity',
            'sensitive_features': 'sensitiveFeatures',
            'non_sensitive_features': 'nonSensitiveFeatures'
        }

        self._sensitive = sensitive
        self._sensitivity = sensitivity
        self._sensitive_features = sensitive_features
        self._non_sensitive_features = non_sensitive_features

    @classmethod
    def from_dict(cls, dikt) -> 'PredictedClassificationWithExplanation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The predictedClassificationWithExplanation of this PredictedClassificationWithExplanation.  # noqa: E501
        :rtype: PredictedClassificationWithExplanation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sensitive(self):
        """Gets the sensitive of this PredictedClassificationWithExplanation.

        true if the document is predicted to be sensitive, false otherwise  # noqa: E501

        :return: The sensitive of this PredictedClassificationWithExplanation.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """Sets the sensitive of this PredictedClassificationWithExplanation.

        true if the document is predicted to be sensitive, false otherwise  # noqa: E501

        :param sensitive: The sensitive of this PredictedClassificationWithExplanation.
        :type sensitive: bool
        """
        if sensitive is None:
            raise ValueError("Invalid value for `sensitive`, must not be `None`")  # noqa: E501

        self._sensitive = sensitive

    @property
    def sensitivity(self):
        """Gets the sensitivity of this PredictedClassificationWithExplanation.

        Document sensitivity percentage  # noqa: E501

        :return: The sensitivity of this PredictedClassificationWithExplanation.
        :rtype: int
        """
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity):
        """Sets the sensitivity of this PredictedClassificationWithExplanation.

        Document sensitivity percentage  # noqa: E501

        :param sensitivity: The sensitivity of this PredictedClassificationWithExplanation.
        :type sensitivity: int
        """

        self._sensitivity = sensitivity

    @property
    def sensitive_features(self):
        """Gets the sensitive_features of this PredictedClassificationWithExplanation.

        The explanation for the \"sensitive\" classification of a document as an array of features and their contribution to the explanation  # noqa: E501

        :return: The sensitive_features of this PredictedClassificationWithExplanation.
        :rtype: List[Feature]
        """
        return self._sensitive_features

    @sensitive_features.setter
    def sensitive_features(self, sensitive_features):
        """Sets the sensitive_features of this PredictedClassificationWithExplanation.

        The explanation for the \"sensitive\" classification of a document as an array of features and their contribution to the explanation  # noqa: E501

        :param sensitive_features: The sensitive_features of this PredictedClassificationWithExplanation.
        :type sensitive_features: List[Feature]
        """

        self._sensitive_features = sensitive_features

    @property
    def non_sensitive_features(self):
        """Gets the non_sensitive_features of this PredictedClassificationWithExplanation.

        The explanation for the \"non sensitive\" classification of a document as an array of features and their contribution to the explanation  # noqa: E501

        :return: The non_sensitive_features of this PredictedClassificationWithExplanation.
        :rtype: List[Feature]
        """
        return self._non_sensitive_features

    @non_sensitive_features.setter
    def non_sensitive_features(self, non_sensitive_features):
        """Sets the non_sensitive_features of this PredictedClassificationWithExplanation.

        The explanation for the \"non sensitive\" classification of a document as an array of features and their contribution to the explanation  # noqa: E501

        :param non_sensitive_features: The non_sensitive_features of this PredictedClassificationWithExplanation.
        :type non_sensitive_features: List[Feature]
        """

        self._non_sensitive_features = non_sensitive_features
