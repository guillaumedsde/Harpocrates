openapi: 3.0.2
info:
  description: This is an API for predictive analytics engines
  version: "0.1.0"
  title: REST API for predictive analtyics
externalDocs:
  description: API documentation
  url: https://visualising-sensitivity-classification-features.gitlab.io/api-specification/
tags:
  - name: set
    description: Everything about documentsets
  - name: document
    description: Everything about documents
paths:
  /documentSet:
    get:
      tags:
        - set
      summary: List all documentsets known by the engine
      operationId: get_sets
      responses:
        "200":
          description: Listing of all known document sets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documentSets"
    post:
      tags:
        - set
      summary: Add a new documentset set to the engine
      operationId: create_set
      x-codegen-request-body-name: new_set
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newDocumentSet"
        description: documentSet descriptor that needs to be added to the engine
        required: true
      responses:
        "200":
          $ref: "#/components/responses/ok"
        "400":
          $ref: "#/components/responses/malformedRequest"
        "409":
          $ref: "#/components/responses/conflict"
  "/documentSet/{setId}":
    get:
      summary: lists all documents in the set
      operationId: get_set
      tags:
        - set
      parameters:
        - $ref: "#/components/parameters/setId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/documents"
        "400":
          $ref: "#/components/responses/malformedRequest"
        "404":
          $ref: "#/components/responses/notFound"
    post:
      tags:
        - document
      summary: Add a new document to the document set
      description: Contents of the document in the body of the request. This should be in plain text. The Content-Type header should be appropriately set to text/plain.
      operationId: create_document
      x-codegen-request-body-name: new_document
      parameters:
        - $ref: "#/components/parameters/setId"
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          $ref: "#/components/responses/ok"
        "400":
          $ref: "#/components/responses/malformedRequest"
        "404":
          $ref: "#/components/responses/notFound"
        "409":
          $ref: "#/components/responses/conflict"
    delete:
      tags:
        - set
      summary: delete the set
      operationId: delete_set
      parameters:
        - $ref: "#/components/parameters/setId"
      responses:
        "200":
          $ref: "#/components/responses/ok"
        "400":
          $ref: "#/components/responses/malformedRequest"
        "404":
          $ref: "#/components/responses/notFound"
  "/documentSet/{setId}/{documentId}":
    get:
      summary: get document from set
      operationId: get_document
      tags:
        - document
      parameters:
        - $ref: "#/components/parameters/setId"
        - $ref: "#/components/parameters/documentId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/document"
        "400":
          $ref: "#/components/responses/malformedRequest"
        "404":
          $ref: "#/components/responses/notFound"
    delete:
      tags:
        - document
      summary: delete the set
      operationId: delete_document
      parameters:
        - $ref: "#/components/parameters/setId"
        - $ref: "#/components/parameters/documentId"
      responses:
        "200":
          $ref: "#/components/responses/ok"
        "400":
          $ref: "#/components/responses/malformedRequest"
        "404":
          $ref: "#/components/responses/notFound"
  # "/documentSet/{setId}/summary":
  #   get:
  #     summary: lists an implementers current summary of the set, such as classification accuracy
  #     operationId: get_set_summary
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #     tags:
  #       - set
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  # "/documentSet/{setId}/search":
  #   get:
  #     summary: provides a search for a given specified query on the set
  #     operationId: search_documents_in_set
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - $ref: "#/components/parameters/searchQuery"
  #     tags:
  #       - set
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  # "/documentSet/{setId}/complete":
  #   get:
  #     summary: indicates to an implementer that all documents in this set have now been uploaded. An implementer may choose to return 409 codes when accessing any documents if this method has not yet been called
  #     operationId: mark_set_as_complete
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #     tags:
  #       - set
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  # "/documentSet/{setId}/byPriority":
  #   get:
  #     summary: lists all documents in the set, ordered by a prediction, such as reviewing time
  #     operationId: get_set_documents_by_priority
  #     tags:
  #       - set
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - in: query
  #         name: priority
  #         description: Priority to filter documents
  #         required: false
  #         schema:
  #           type: string
  #           default: reviewingTime
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  #       "400":
  #         $ref: "#/components/responses/malformedRequest"
  #       "404":
  #         $ref: "#/components/responses/notFound"
  #       "409":
  #         $ref: "#/components/responses/conflict"
  # "/documentSet/{setId}/{documentId}/sensitivities":
  #   get:
  #     tags:
  #       - document
  #     summary: Returns the predicted sensitivities in the document
  #     operationId: get_document_sensitivities
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - $ref: "#/components/parameters/documentId"
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           "*/*":
  #             schema:
  #               $ref: "#/components/schemas/sensitivityPrediction"
  #       "400":
  #         $ref: "#/components/responses/malformedRequest"
  #       "404":
  #         $ref: "#/components/responses/notFound"
  #       "409":
  #         $ref: "#/components/responses/conflict"
  # "/documentSet/{setId}/{documentId}/{reviewerid}/sensitivities":
  #   post:
  #     tags:
  #       - document
  #     summary: Records the sensitivities that were found in the document by reviewers
  #     operationId: post_document_sensitivities
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - $ref: "#/components/parameters/documentId"
  #       - $ref: "#/components/parameters/reviewerId"
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/sensitivityAnnotation"
  #       required: true
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  #       "400":
  #         $ref: "#/components/responses/malformedRequest"
  #       "404":
  #         $ref: "#/components/responses/notFound"
  #       "409":
  #         $ref: "#/components/responses/conflict"
  # "/documentSet/{setId}/{documentId}/contents":
  #   get:
  #     tags:
  #       - document
  #     summary: Returns this engine's representation of the document
  #     operationId: get_document
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - $ref: "#/components/parameters/documentId"
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  #       "400":
  #         $ref: "#/components/responses/malformedRequest"
  #       "404":
  #         $ref: "#/components/responses/notFound"
  #       "409":
  #         $ref: "#/components/responses/conflict"
  # "/documentSet/{setId}/{documentId}/reviewingTime":
  #   get:
  #     tags:
  #       - document
  #     summary: Returns a prediction of the reviewing time of the document
  #     operationId: get_document_estimated_review_time
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - $ref: "#/components/parameters/documentId"
  #     responses:
  #       "200":
  #         description: successful operation
  #         content:
  #           "*/*":
  #             schema:
  #               $ref: "#/components/schemas/reviewingTime"
  #       "400":
  #         $ref: "#/components/responses/malformedRequest"
  #       "404":
  #         $ref: "#/components/responses/notFound"
  #       "409":
  #         $ref: "#/components/responses/conflict"
  # "/documentSet/{setId}/{documentId}/{reviewerid}/reviewingTime":
  #   post:
  #     tags:
  #       - document
  #     summary: Inform the engine of the actual reviewing time of the document
  #     operationId: get_document_actual_review_time
  #     parameters:
  #       - $ref: "#/components/parameters/setId"
  #       - $ref: "#/components/parameters/documentId"
  #       - $ref: "#/components/parameters/reviewerId"
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: "#/components/schemas/actualReviewingTime"
  #       required: true
  #     responses:
  #       "200":
  #         $ref: "#/components/responses/ok"
  #       "400":
  #         $ref: "#/components/responses/malformedRequest"
  #       "404":
  #         $ref: "#/components/responses/notFound"
  #       "409":
  #         $ref: "#/components/responses/conflict"
servers:
  - url: /0.1.0
components:
  parameters:
    documentId:
      in: path
      name: documentId
      description: ID of a document
      required: true
      schema:
        type: string
    setId:
      in: path
      name: setId
      required: true
      description: ID of a set
      schema:
        type: string
    # reviewerId:
    #   in: path
    #   name: reviewerid
    #   description: ID of the reviewer
    #   required: true
    #   schema:
    #     type: string
    # searchQuery:
    #   in: query
    #   name: searchQuery
    #   description: Search query for filtering documents in the set
    #   required: true
    #   schema:
    #     type: string
    # documentPriority:
    #   in: query
    #   name: documentPriority
    #   description: Priority to filter documents
    #   required: false
    #   schema: $ref "#/components/schemas/documentPriority"
  responses:
    # FIXME codes and messages don't actually have values
    notFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/httpStatus"
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/httpStatus"
    ok:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/httpStatus"
    conflict:
      description: Conflicting element already present
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/httpStatus"
    malformedRequest:
      description: The request was invalid JSON or missing some attributes
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/httpStatus"
  schemas:
    # Schema for error response body
    httpStatus:
      required:
        - code
        - message
      type: object
      description: This object describes an HTTP status
      properties:
        code:
          type: integer
          format: int32
          minimum: 100
          maximum: 600
          description: HTTP status code
        message:
          type: string
          description: HTTP status message
    newDocumentSet:
      type: object
      description: schema for a new set of Documents "document set"
      required:
        - name
      properties:
        name:
          type: string
          description: Name of the document Set
          example: FCC/1/400
    documentSet:
      allOf:
        # extend newDocumentSet
        - $ref: "#/components/schemas/newDocumentSet"
        # add uid field specific to already created document sets
        - type: object
          description: schema for a set of Documents "document set"
          required:
            - uid
          properties:
            uid:
              type: string
              description: Unique ID of the document Set
    documentSets:
      type: object
      description: an object representing multiple document sets
      required:
        - documentSets
      properties:
        documentSets:
          type: array
          description: array of document sets
          items:
            $ref: "#/components/schemas/documentSet"
    # actualReviewingTime:
    #   type: object
    #   description: A actual reviewing time (as opposed to an estimated reviewing time)
    #   properties:
    #     actualTime:
    #       description: Actual time for review
    #       type: number
    #       format: float
    #       example: 10.1
    # reviewingTime:
    #   type: object
    #   description: An estimated reviewing time (as opposed to an actual reviewing time)
    #   allOf:
    #     - $ref: "#/components/schemas/actualReviewingTime"
    #   required:
    #     - predictedTime
    #   properties:
    #     predictedTime:
    #       type: number
    #       # TODO specify unit
    #       description: Predicted time for review
    #       format: float
    #       example: 10.5
    # documentPriority:
    #   type: object
    #   description: Priority ranking of a document in a set
    #   required:
    #     - priority
    #   properties:
    #     priority:
    #       type: number
    #       format: float
    #       example: 10.5
    # section:
    #   description: This is the base object for recording or suggesting sensitivities
    #   title: section
    #   type: object
    #   required:
    #     - name
    #   properties:
    #     startOffset:
    #       type: integer
    #       format: int32
    #       example: 4
    #       description: start offset of an annotation in characters (required for an annotation)
    #     startWord:
    #       type: string
    #       example: was
    #       description: actual first word of an annotation
    #     endOffset:
    #       type: integer
    #       format: int32
    #       example: 20
    #       description: end offset of an annotation in characters (required for an annotation)
    #     endWord:
    #       type: string
    #       example: said
    #       description: actual last word of an annotation
    #     fullAnnotation:
    #       type: string
    #       example: The minister said
    #       description: For debugging purposes, the full text of the annotation
    #     name:
    #       type: string
    #       example: S27
    #       description: what was the exemption that was found (mandatory)
    #     description:
    #       type: string
    #       example: This matches the Royal Family checklist
    #       description: This is an optional textual description of what the predicted sensitivity is, suitable for presentation to the user
    # predictedSection:
    #   description: This object describes a suggested annotation
    #   title: predictedSection
    #   allOf:
    #     - $ref: "#/components/schemas/section"
    #     - type: object
    #       properties:
    #         confidence:
    #           type: number
    #           format: float
    #           example: 0.75
    #         confidenceType:
    #           type: string
    #           example: probability
    document:
      type: object
      description: A document to review
      required:
        - documentId
      properties:
        documentId:
          type: string
          description: Unique id for the document
    documents:
      type: object
      description: an object representing multiple documents
      required:
        - documents
      properties:
        documents:
          type: array
          description: array of documents
          items:
            $ref: "#/components/schemas/document"
    # sensitivityPrediction:
    #   type: object
    #   required:
    #     - predictedSections
    #   properties:
    #     predictedSections:
    #       type: array
    #       items:
    #         $ref: "#/components/schemas/predictedSection"
    # sensitivityAnnotation:
    #   type: object
    #   required:
    #     - sections
    #   properties:
    #     sections:
    #       type: array
    #       items:
    #         $ref: "#/components/schemas/section"
